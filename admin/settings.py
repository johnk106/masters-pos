"""
Django settings for admin project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*%c((g%ip%f&^gjukext4g0_5dxv4mtqew-0%uagt0czig0_$!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'
# DEBUG = True
ALLOWED_HOSTS = ['*', '28c014be4b76.ngrok-free.app', 'fe72d78ed8ca.ngrok-free.app', '4f8709db6396.ngrok-free.app', 'ff4f35f422ff.ngrok-free.app', 'eee9-197-155-73-23.ngrok-free.app', '9341a4f03274.ngrok-free.app', 'bdcd874d5d22.ngrok-free.app', '4221432d5863.ngrok-free.app', '8f7451180f8b.ngrok-free.app', '50967ea1e171.ngrok-free.app', '5615ad1d259e.ngrok-free.app']

CSRF_TRUSTED_ORIGINS = ['http://161.97.114.207','https://eee9-197-155-73-23.ngrok-free.app', 'https://28c014be4b76.ngrok-free.app', 'https://fe72d78ed8ca.ngrok-free.app', 'https://4f8709db6396.ngrok-free.app', 'https://ff4f35f422ff.ngrok-free.app', 'https://9341a4f03274.ngrok-free.app', 'https://bdcd874d5d22.ngrok-free.app', 'https://4221432d5863.ngrok-free.app', 'https://8f7451180f8b.ngrok-free.app', 'https://50967ea1e171.ngrok-free.app', 'https://5615ad1d259e.ngrok-free.app']

# Dynamically add ngrok origin if provided via environment
try:
    NGROK_PUBLIC_URL = os.getenv('NGROK_PUBLIC_URL', '').strip()
    if NGROK_PUBLIC_URL:
        from urllib.parse import urlparse
        parsed = urlparse(NGROK_PUBLIC_URL if NGROK_PUBLIC_URL.startswith('http') else f'https://{NGROK_PUBLIC_URL}')
        origin = f"{parsed.scheme}://{parsed.netloc}"
        if origin not in CSRF_TRUSTED_ORIGINS:
            CSRF_TRUSTED_ORIGINS.append(origin)
        host = parsed.netloc
        if host and host not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(host)
except Exception:
    pass

LOGIN_URL = '/dashboard/authentication/accounts/login/'

LOGOUT_URL = '/dashboard/authentication/logout/'

LOGIN_EXEMPT_URLS = [
    'authentication:login',
    'sales:mpesa-callback',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'landing',
    'inventory',
    'finance',
    'purchases',
    'sales',
    'people',
    'reports',
    'content',
    'authentication',
    'settings',
    'django.contrib.humanize'
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",  
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'authentication.middleware.LoginRequiredMiddleware'
]

ROOT_URLCONF = 'admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'admin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB'),
            'USER': os.getenv('POSTGRES_USER'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
            'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles"

# Configure logging to reduce ngrok warnings
try:
    from .logging_config import configure_logging
    configure_logging()
except ImportError:
    pass  
STATIC_URL = "/static/"

MEDIA_URL = '/media/'

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# M-Pesa Configuration
# These should be set as environment variables in production
MPESA_ENVIRONMENT = os.getenv('MPESA_ENVIRONMENT', 'sandbox')  # 'sandbox' or 'production'
MPESA_CONSUMER_KEY = os.getenv('MPESA_CONSUMER_KEY', '')
MPESA_CONSUMER_SECRET = os.getenv('MPESA_CONSUMER_SECRET', '')
MPESA_BUSINESS_SHORTCODE = os.getenv('MPESA_BUSINESS_SHORTCODE', '174379')  # Sandbox default
MPESA_PASSKEY = os.getenv('MPESA_PASSKEY', 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919')  # Sandbox default

# Logging configuration for M-Pesa
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'mpesa.log',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'sales.mpesa_service': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Email configuration
EMAIL_HOST = os.getenv('EMAIL_HOST', '')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587')) if os.getenv('EMAIL_PORT') else None
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False') == 'True'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@example.com')

# Choose email backend based on environment
if DEBUG and not EMAIL_HOST:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Ensure TLS/SSL mutual exclusivity per env; Django will respect the booleans
# No secrets are logged anywhere.

# Caching (used for ngrok notification idempotency)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'pos-default-cache',
    }
}
